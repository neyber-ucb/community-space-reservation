openapi: 3.0.1
info:
  title: Community Space Reservation API
  description: API for managing community space reservations using hexagonal architecture
  version: 'v1'
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /api/v1/auth/login:
    post:
      summary: Authenticates user and returns JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
              required:
                - email
                - password
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid email or password
  /api/v1/users:
    post:
      summary: Creates a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: password123
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully
                  user:
                    $ref: '#/components/schemas/User'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email has already been taken
  /api/v1/users/me:
    get:
      summary: Returns the current user's profile
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
  /api/v1/spaces:
    get:
      summary: Returns a list of available spaces
      tags:
        - Spaces
      security:
        - bearerAuth: []
      parameters:
        - name: space_type
          in: query
          schema:
            type: string
          description: Filter spaces by type
      responses:
        '200':
          description: List of spaces
          content:
            application/json:
              schema:
                type: object
                properties:
                  spaces:
                    type: array
                    items:
                      $ref: '#/components/schemas/Space'
    post:
      summary: Creates a new space (admin only)
      tags:
        - Spaces
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpaceInput'
      responses:
        '201':
          description: Space created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Space created successfully
                  space:
                    $ref: '#/components/schemas/Space'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
  /api/v1/spaces/{id}:
    get:
      summary: Returns a specific space
      tags:
        - Spaces
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Space details
          content:
            application/json:
              schema:
                type: object
                properties:
                  space:
                    $ref: '#/components/schemas/Space'
        '404':
          description: Space not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Space not found
  /api/v1/bookings:
    get:
      summary: Returns a list of user's bookings
      tags:
        - Bookings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                type: object
                properties:
                  bookings:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
    post:
      summary: Creates a new booking
      tags:
        - Bookings
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                space_id:
                  type: integer
                  example: 1
                start_time:
                  type: string
                  format: date-time
                  example: '2025-06-15T14:00:00Z'
                end_time:
                  type: string
                  format: date-time
                  example: '2025-06-15T16:00:00Z'
              required:
                - space_id
                - start_time
                - end_time
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Booking created successfully
                  booking:
                    $ref: '#/components/schemas/Booking'
        '422':
          description: Validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Space is not available for the requested time
  /api/v1/bookings/{id}:
    get:
      summary: Returns a specific booking
      tags:
        - Bookings
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Booking details
          content:
            application/json:
              schema:
                type: object
                properties:
                  booking:
                    $ref: '#/components/schemas/Booking'
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Booking not found
  /api/v1/bookings/{id}/confirm:
    post:
      summary: Confirms a booking (admin only)
      tags:
        - Bookings
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Booking confirmed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Booking confirmed successfully
                  booking:
                    $ref: '#/components/schemas/Booking'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Booking not found
  /api/v1/bookings/{id}/cancel:
    post:
      summary: Cancels a booking (admin only)
      tags:
        - Bookings
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Booking cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Booking cancelled successfully
                  booking:
                    $ref: '#/components/schemas/Booking'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
        '404':
          description: Booking not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Booking not found
  /api/v1/notifications:
    get:
      summary: Returns a list of user's notifications
      tags:
        - Notifications
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
  /api/v1/notifications/unread:
    get:
      summary: Returns a list of user's unread notifications
      tags:
        - Notifications
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of unread notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
  /api/v1/notifications/{id}:
    get:
      summary: Returns a specific notification
      tags:
        - Notifications
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Notification details
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification:
                    $ref: '#/components/schemas/Notification'
        '404':
          description: Notification not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Notification not found
  /api/v1/notifications/{id}/read:
    patch:
      summary: Marks a notification as read
      tags:
        - Notifications
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification marked as read
        '404':
          description: Notification not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Notification not found
  /api/v1/notifications/read_all:
    patch:
      summary: Marks all notifications as read
      tags:
        - Notifications
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All notifications marked as read
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All notifications marked as read
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@example.com
        role:
          type: string
          enum: [user, admin]
          example: user
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Space:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Main Hall
        description:
          type: string
          example: Large event space for community gatherings
        capacity:
          type: integer
          example: 100
        space_type:
          type: string
          example: hall
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    SpaceInput:
      type: object
      properties:
        name:
          type: string
          example: Main Hall
        description:
          type: string
          example: Large event space for community gatherings
        capacity:
          type: integer
          example: 100
        space_type:
          type: string
          example: hall
      required:
        - name
        - capacity
        - space_type
    Booking:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        space_id:
          type: integer
          example: 1
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, confirmed, cancelled]
          example: pending
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Notification:
      type: object
      properties:
        id:
          type: integer
          example: 1
        content:
          type: string
          example: Your booking has been confirmed
        notification_type:
          type: string
          enum: [booking_created, booking_confirmed, booking_cancelled, booking_reminder, welcome]
          example: booking_confirmed
        read:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
